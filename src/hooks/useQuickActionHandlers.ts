
/**
 * Quick Action Handlers Hook
 * Centralized handlers for all quick action operations
 * Ensures all actions are synchronized with main system records
 */

import { useToast } from "@/hooks/use-toast";
import { useEmployeeData } from "@/hooks/useEmployeeData";
import { useLeaveData } from "@/hooks/useLeaveData";

export const useQuickActionHandlers = () => {
  const { toast } = useToast();
  const { addEmployee, allEmployees } = useEmployeeData();
  const { approveLeaveRequest, rejectLeaveRequest, allLeaveRequests } = useLeaveData();

  /**
   * Generate and download report content based on report type and parameters
   */
  const generateReportContent = (reportType: string, reportParams: any) => {
    const currentDate = new Date().toLocaleDateString();
    const currentTime = new Date().toLocaleTimeString();
    
    // Filter employees by department if specified
    const filteredEmployees = reportParams.department 
      ? allEmployees.filter(emp => emp.department === reportParams.department)
      : allEmployees;

    // Filter leave requests by department if specified
    const filteredLeaveRequests = reportParams.department 
      ? allLeaveRequests.filter(req => {
          const emp = allEmployees.find(e => e.name === req.employee);
          return emp?.department === reportParams.department;
        })
      : allLeaveRequests;

    switch (reportType) {
      case 'Attendance Report':
        return `
ATTENDANCE REPORT
================
Generated: ${currentDate} at ${currentTime}
Date Range: ${reportParams.dateRange}
Department: ${reportParams.department || 'All Departments'}

SUMMARY:
========
Total Employees: ${filteredEmployees.length}
Active Employees: ${filteredEmployees.filter(emp => emp.status === 'Active').length}
Departments Covered: ${reportParams.department || 'All'}

EMPLOYEE ATTENDANCE DETAILS:
===========================
${filteredEmployees.map(emp => `
Employee: ${emp.name} (${emp.id})
Department: ${emp.department}
Status: ${emp.status}
Join Date: ${emp.joinDate}
`).join('')}

ATTENDANCE SUMMARY BY DEPARTMENT:
================================
${Object.entries(filteredEmployees.reduce((acc, emp) => {
  acc[emp.department] = (acc[emp.department] || 0) + 1;
  return acc;
}, {} as Record<string, number>)).map(([dept, count]) => `${dept}: ${count} employees`).join('\n')}

Report Generated by: HR System Quick Actions
Report ID: ATT-${Date.now()}
        `.trim();

      case 'Payroll Summary':
        const totalSalary = filteredEmployees.reduce((sum, emp) => sum + emp.baseSalary, 0);
        const avgSalary = filteredEmployees.length > 0 ? totalSalary / filteredEmployees.length : 0;
        
        return `
PAYROLL SUMMARY REPORT
=====================
Generated: ${currentDate} at ${currentTime}
Date Range: ${reportParams.dateRange}
Department: ${reportParams.department || 'All Departments'}

PAYROLL OVERVIEW:
================
Total Employees: ${filteredEmployees.length}
Total Annual Salary: $${totalSalary.toLocaleString()}
Average Salary: $${Math.round(avgSalary).toLocaleString()}
Monthly Payroll: $${Math.round(totalSalary / 12).toLocaleString()}

EMPLOYEE SALARY DETAILS:
=======================
${filteredEmployees.map(emp => `
${emp.name} (${emp.id})
Department: ${emp.department}
Position: ${emp.role}
Annual Salary: $${emp.baseSalary.toLocaleString()}
Monthly: $${Math.round(emp.baseSalary / 12).toLocaleString()}
`).join('')}

DEPARTMENT SALARY BREAKDOWN:
===========================
${Object.entries(filteredEmployees.reduce((acc, emp) => {
  if (!acc[emp.department]) {
    acc[emp.department] = { count: 0, total: 0 };
  }
  acc[emp.department].count++;
  acc[emp.department].total += emp.baseSalary;
  return acc;
}, {} as Record<string, { count: number; total: number }>)).map(([dept, data]) => 
  `${dept}: ${data.count} employees, $${data.total.toLocaleString()} total, $${Math.round(data.total / data.count).toLocaleString()} average`
).join('\n')}

Report Generated by: HR System Quick Actions
Report ID: PAY-${Date.now()}
        `.trim();

      case 'Leave Analysis':
        const pendingRequests = filteredLeaveRequests.filter(req => req.status === 'Pending');
        const approvedRequests = filteredLeaveRequests.filter(req => req.status === 'Approved');
        const rejectedRequests = filteredLeaveRequests.filter(req => req.status === 'Rejected');
        
        return `
LEAVE ANALYSIS REPORT
====================
Generated: ${currentDate} at ${currentTime}
Date Range: ${reportParams.dateRange}
Department: ${reportParams.department || 'All Departments'}

LEAVE REQUEST SUMMARY:
=====================
Total Requests: ${filteredLeaveRequests.length}
Pending: ${pendingRequests.length}
Approved: ${approvedRequests.length}
Rejected: ${rejectedRequests.length}

DETAILED LEAVE REQUESTS:
=======================
${filteredLeaveRequests.map(req => `
Request ID: ${req.id}
Employee: ${req.employee}
Type: ${req.type}
Duration: ${req.days} days
From: ${req.startDate} to ${req.endDate}
Status: ${req.status}
Applied: ${req.appliedDate}
Reason: ${req.reason || 'Not specified'}
`).join('')}

LEAVE TYPE BREAKDOWN:
====================
${Object.entries(filteredLeaveRequests.reduce((acc, req) => {
  acc[req.type] = (acc[req.type] || 0) + 1;
  return acc;
}, {} as Record<string, number>)).map(([type, count]) => `${type}: ${count} requests`).join('\n')}

Report Generated by: HR System Quick Actions
Report ID: LEV-${Date.now()}
        `.trim();

      case 'Performance Report':
        return `
PERFORMANCE REPORT
=================
Generated: ${currentDate} at ${currentTime}
Date Range: ${reportParams.dateRange}
Department: ${reportParams.department || 'All Departments'}

EMPLOYEE PERFORMANCE OVERVIEW:
=============================
Total Employees Evaluated: ${filteredEmployees.length}
Active Employees: ${filteredEmployees.filter(emp => emp.status === 'Active').length}

EMPLOYEE DETAILS:
================
${filteredEmployees.map(emp => `
Employee: ${emp.name} (${emp.id})
Department: ${emp.department}
Position: ${emp.role}
Join Date: ${emp.joinDate}
Status: ${emp.status}
Manager: ${emp.manager}
Tenure: ${Math.floor((new Date().getTime() - new Date(emp.joinDate).getTime()) / (1000 * 60 * 60 * 24 * 365))} years
`).join('')}

DEPARTMENT PERFORMANCE METRICS:
==============================
${Object.entries(filteredEmployees.reduce((acc, emp) => {
  if (!acc[emp.department]) acc[emp.department] = [];
  acc[emp.department].push(emp);
  return acc;
}, {} as Record<string, typeof filteredEmployees>)).map(([dept, emps]) => `
${dept} Department:
- Total Employees: ${emps.length}
- Active: ${emps.filter(e => e.status === 'Active').length}
- Average Tenure: ${Math.floor(emps.reduce((sum, e) => sum + Math.floor((new Date().getTime() - new Date(e.joinDate).getTime()) / (1000 * 60 * 60 * 24 * 365)), 0) / emps.length)} years
`).join('')}

Report Generated by: HR System Quick Actions
Report ID: PERF-${Date.now()}
        `.trim();

      case 'Department Overview':
        if (reportParams.department) {
          const deptEmployees = filteredEmployees;
          const deptSalary = deptEmployees.reduce((sum, emp) => sum + emp.baseSalary, 0);
          
          return `
DEPARTMENT OVERVIEW REPORT
=========================
Generated: ${currentDate} at ${currentTime}
Department: ${reportParams.department}
Date Range: ${reportParams.dateRange}

DEPARTMENT SUMMARY:
==================
Department Name: ${reportParams.department}
Total Employees: ${deptEmployees.length}
Active Employees: ${deptEmployees.filter(emp => emp.status === 'Active').length}
Total Annual Salaries: $${deptSalary.toLocaleString()}
Average Salary: $${Math.round(deptSalary / deptEmployees.length).toLocaleString()}

EMPLOYEE ROSTER:
===============
${deptEmployees.map(emp => `
${emp.name} (${emp.id})
Position: ${emp.role}
Status: ${emp.status}
Join Date: ${emp.joinDate}
Salary: $${emp.baseSalary.toLocaleString()}
Manager: ${emp.manager}
`).join('')}

Report Generated by: HR System Quick Actions
Report ID: DEPT-${Date.now()}
          `.trim();
        } else {
          const deptStats = Object.entries(allEmployees.reduce((acc, emp) => {
            if (!acc[emp.department]) {
              acc[emp.department] = { count: 0, active: 0, totalSalary: 0 };
            }
            acc[emp.department].count++;
            if (emp.status === 'Active') acc[emp.department].active++;
            acc[emp.department].totalSalary += emp.baseSalary;
            return acc;
          }, {} as Record<string, { count: number; active: number; totalSalary: number }>));
          
          return `
ALL DEPARTMENTS OVERVIEW
=======================
Generated: ${currentDate} at ${currentTime}
Date Range: ${reportParams.dateRange}

COMPANY SUMMARY:
===============
Total Departments: ${deptStats.length}
Total Employees: ${allEmployees.length}
Active Employees: ${allEmployees.filter(emp => emp.status === 'Active').length}

DEPARTMENT BREAKDOWN:
====================
${deptStats.map(([dept, stats]) => `
${dept} Department:
- Total Employees: ${stats.count}
- Active Employees: ${stats.active}
- Total Salaries: $${stats.totalSalary.toLocaleString()}
- Average Salary: $${Math.round(stats.totalSalary / stats.count).toLocaleString()}
`).join('')}

Report Generated by: HR System Quick Actions
Report ID: ALL-DEPT-${Date.now()}
          `.trim();
        }

      default:
        return `
GENERAL REPORT
=============
Generated: ${currentDate} at ${currentTime}
Report Type: ${reportType}
Date Range: ${reportParams.dateRange}
Department: ${reportParams.department || 'All Departments'}

This report type is not yet implemented.
Please contact system administrator for custom report requirements.

Report Generated by: HR System Quick Actions
Report ID: GEN-${Date.now()}
        `.trim();
    }
  };

  /**
   * Download file with given content and filename
   */
  const downloadFile = (content: string, filename: string, mimeType: string = 'text/plain') => {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  /**
   * Handle adding new employee - integrates directly with main employee records
   * Validates form data and creates comprehensive employee record
   */
  const handleAddEmployee = (employeeForm: any, resetForm: () => void) => {
    // Validate required fields
    if (!employeeForm.firstName || !employeeForm.lastName || !employeeForm.email || !employeeForm.department) {
      toast({
        title: "Validation Error",
        description: "Please fill in all required fields (First Name, Last Name, Email, Department).",
        variant: "destructive"
      });
      return;
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(employeeForm.email)) {
      toast({
        title: "Invalid Email",
        description: "Please enter a valid email address.",
        variant: "destructive"
      });
      return;
    }

    // Check for duplicate email in existing records
    const existingEmployee = allEmployees.find(emp => emp.email.toLowerCase() === employeeForm.email.toLowerCase());
    if (existingEmployee) {
      toast({
        title: "Duplicate Email",
        description: "An employee with this email already exists.",
        variant: "destructive"
      });
      return;
    }

    // Create comprehensive employee object that matches the Employee interface
    const currentDate = new Date().toISOString().split('T')[0];
    const joinDate = employeeForm.startDate || currentDate;
    const fullName = `${employeeForm.firstName.trim()} ${employeeForm.lastName.trim()}`;
    
    const newEmployee = {
      name: fullName,
      email: employeeForm.email.trim(),
      phone: employeeForm.phone?.trim() || `+1 ${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 900) + 100}-${Math.floor(Math.random() * 9000) + 1000}`,
      department: employeeForm.department,
      role: employeeForm.position?.trim() || 'Employee',
      status: 'Active' as const,
      joinDate: joinDate,
      address: employeeForm.address?.trim() || 'Address not provided',
      dateOfBirth: '1990-01-01', // Default birth date, can be updated later
      profilePicture: undefined,
      emergencyContact: {
        name: 'Not specified',
        phone: 'Not specified',
        relationship: 'Not specified'
      },
      manager: 'Not assigned',
      baseSalary: parseInt(employeeForm.baseSalary) || 50000,
      employmentHistory: [{
        title: employeeForm.position?.trim() || 'Employee',
        department: employeeForm.department,
        startDate: joinDate,
        current: true
      }],
      documents: []
    };

    // Add employee to the main employee data store
    addEmployee(newEmployee);
    
    toast({
      title: "Employee Added Successfully",
      description: `${fullName} has been added to the employee records and is now available in the Employee Records page.`,
    });

    // Reset form after successful addition
    resetForm();
    
    console.log('Employee added via Quick Actions and synced to main records:', newEmployee);
  };

  /**
   * Handle payroll processing - synchronized with main employee records
   * Processes payroll for all active employees from main records
   */
  const handleProcessPayroll = () => {
    const activeEmployees = allEmployees.filter(emp => emp.status === 'Active');
    
    if (activeEmployees.length === 0) {
      toast({
        title: "No Active Employees",
        description: "No active employees found for payroll processing.",
        variant: "destructive"
      });
      return;
    }

    // Simulate payroll processing with employee data from main records
    console.log('Processing payroll for employees:', activeEmployees.map(emp => ({
      id: emp.id,
      name: emp.name,
      department: emp.department,
      baseSalary: emp.baseSalary
    })));

    toast({
      title: "Payroll Processing Started",
      description: `Payroll for ${activeEmployees.length} active employees is being processed from main records. You will be notified when complete.`,
    });
  };

  /**
   * Handle leave request actions - directly updates main leave records
   * Approves or rejects leave requests and updates main system
   */
  const handleLeaveAction = (action: 'approve' | 'reject', requestId: string, employeeName: string) => {
    // Find the request in main records to ensure it exists
    const request = allLeaveRequests.find(req => req.id === requestId);
    
    if (!request) {
      toast({
        title: "Request Not Found",
        description: "The leave request could not be found in the system.",
        variant: "destructive"
      });
      return;
    }

    if (request.status !== 'Pending') {
      toast({
        title: "Request Already Processed",
        description: `This leave request has already been ${request.status.toLowerCase()}.`,
        variant: "destructive"
      });
      return;
    }

    if (action === 'approve') {
      approveLeaveRequest(requestId, 'HR Manager', 'Approved via Quick Actions');
      toast({
        title: "Leave Request Approved",
        description: `${employeeName}'s leave request has been approved and updated in main records.`,
      });
    } else {
      rejectLeaveRequest(requestId, 'HR Manager', 'Rejected via Quick Actions - needs more information');
      toast({
        title: "Leave Request Rejected",
        description: `${employeeName}'s leave request has been rejected and updated in main records.`,
        variant: "destructive"
      });
    }

    console.log(`Leave request ${requestId} ${action}ed via Quick Actions and synced to main records`);
  };

  /**
   * Handle report generation - uses data from main system records
   * Generates reports based on current state of main database and downloads them
   */
  const handleGenerateReport = (reportParams: any) => {
    if (!reportParams.reportType) {
      toast({
        title: "Validation Error",
        description: "Please select a report type.",
        variant: "destructive"
      });
      return;
    }

    // Generate report content with actual data
    const reportContent = generateReportContent(reportParams.reportType, reportParams);
    
    // Create filename based on report type and current date
    const dateStr = new Date().toISOString().split('T')[0];
    const reportTypeForFile = reportParams.reportType.replace(/\s+/g, '_').toLowerCase();
    const deptSuffix = reportParams.department ? `_${reportParams.department.replace(/\s+/g, '_').toLowerCase()}` : '';
    
    let filename: string;
    let mimeType: string;
    
    switch (reportParams.format.toLowerCase()) {
      case 'pdf':
        filename = `${reportTypeForFile}${deptSuffix}_${dateStr}.pdf`;
        mimeType = 'application/pdf';
        break;
      case 'excel':
        filename = `${reportTypeForFile}${deptSuffix}_${dateStr}.xlsx`;
        mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
        break;
      case 'csv':
        filename = `${reportTypeForFile}${deptSuffix}_${dateStr}.csv`;
        mimeType = 'text/csv';
        break;
      default:
        filename = `${reportTypeForFile}${deptSuffix}_${dateStr}.txt`;
        mimeType = 'text/plain';
    }

    // Download the report
    downloadFile(reportContent, filename, mimeType);

    // Log report generation details
    console.log('Generated report with main system data:', {
      reportType: reportParams.reportType,
      totalEmployees: allEmployees.length,
      totalLeaveRequests: allLeaveRequests.length,
      parameters: reportParams,
      filename: filename
    });

    toast({
      title: "Report Generated Successfully",
      description: `${reportParams.reportType} has been generated from main system records and downloaded as ${filename}`,
    });
  };

  /**
   * Handle performance review scheduling - uses main employee records
   * Schedules reviews for employees from main system
   */
  const handleScheduleReview = (reviewForm: any, resetForm: () => void) => {
    if (!reviewForm.employee || !reviewForm.dueDate) {
      toast({
        title: "Validation Error",
        description: "Please select an employee and due date.",
        variant: "destructive"
      });
      return;
    }

    // Verify employee exists in main records
    const employee = allEmployees.find(emp => emp.name === reviewForm.employee);
    if (!employee) {
      toast({
        title: "Employee Not Found",
        description: "The selected employee could not be found in main records.",
        variant: "destructive"
      });
      return;
    }

    // Validate due date is in the future
    const dueDate = new Date(reviewForm.dueDate);
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    if (dueDate < today) {
      toast({
        title: "Invalid Due Date",
        description: "Due date must be in the future.",
        variant: "destructive"
      });
      return;
    }

    // Create performance review record linked to main employee record
    const reviewData = {
      employeeId: employee.id,
      employeeName: employee.name,
      department: employee.department,
      reviewType: reviewForm.reviewType,
      reviewer: reviewForm.reviewer,
      dueDate: reviewForm.dueDate,
      goals: reviewForm.goals?.trim() || 'No specific goals specified',
      scheduledDate: new Date().toISOString().split('T')[0],
      status: 'Scheduled'
    };

    console.log('Performance review scheduled for employee from main records:', reviewData);

    toast({
      title: "Performance Review Scheduled",
      description: `Performance review has been scheduled for ${reviewForm.employee} from main employee records.`,
    });

    // Reset form after successful scheduling
    resetForm();
  };

  return {
    handleAddEmployee,
    handleProcessPayroll,
    handleLeaveAction,
    handleGenerateReport,
    handleScheduleReview
  };
};
