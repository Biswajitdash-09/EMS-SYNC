
/**
 * Quick Action Handlers Hook
 * Centralized handlers for all quick action operations
 * Ensures all actions are synchronized with main system records
 */

import { useToast } from "@/hooks/use-toast";
import { useEmployeeData } from "@/hooks/useEmployeeData";
import { useLeaveData } from "@/hooks/useLeaveData";
import { 
  generateAttendanceReport, 
  generatePayrollReport, 
  generateLeaveReport, 
  generatePerformanceReport, 
  generateDepartmentReport,
  downloadFile,
  ReportParams 
} from "@/utils/reportGenerator";
import { 
  validateRequiredFields, 
  validateEmailFormat, 
  checkDuplicateEmail, 
  createEmployeeFromForm,
  EmployeeFormData 
} from "@/utils/employeeValidation";

export const useQuickActionHandlers = () => {
  const { toast } = useToast();
  const { addEmployee, allEmployees } = useEmployeeData();
  const { approveLeaveRequest, rejectLeaveRequest, allLeaveRequests } = useLeaveData();

  /**
   * Generate and download report content based on report type and parameters
   */
  const generateReportContent = (reportType: string, reportParams: ReportParams) => {
    // Filter employees by department if specified
    const filteredEmployees = reportParams.department 
      ? allEmployees.filter(emp => emp.department === reportParams.department)
      : allEmployees;

    // Filter leave requests by department if specified
    const filteredLeaveRequests = reportParams.department 
      ? allLeaveRequests.filter(req => {
          const emp = allEmployees.find(e => e.name === req.employee);
          return emp?.department === reportParams.department;
        })
      : allLeaveRequests;

    switch (reportType) {
      case 'Attendance Report':
        return generateAttendanceReport(filteredEmployees, reportParams);
      case 'Payroll Summary':
        return generatePayrollReport(filteredEmployees, reportParams);
      case 'Leave Analysis':
        return generateLeaveReport(filteredLeaveRequests, reportParams);
      case 'Performance Report':
        return generatePerformanceReport(filteredEmployees, reportParams);
      case 'Department Overview':
        return generateDepartmentReport(allEmployees, filteredEmployees, reportParams);
      default:
        const currentDate = new Date().toLocaleDateString();
        const currentTime = new Date().toLocaleTimeString();
        return `
GENERAL REPORT
=============
Generated: ${currentDate} at ${currentTime}
Report Type: ${reportType}
Date Range: ${reportParams.dateRange}
Department: ${reportParams.department || 'All Departments'}

This report type is not yet implemented.
Please contact system administrator for custom report requirements.

Report Generated by: HR System Quick Actions
Report ID: GEN-${Date.now()}
        `.trim();
    }
  };

  /**
   * Handle adding new employee - integrates directly with main employee records
   */
  const handleAddEmployee = (employeeForm: EmployeeFormData, resetForm: () => void) => {
    // Validate required fields
    if (!validateRequiredFields(employeeForm)) {
      toast({
        title: "Validation Error",
        description: "Please fill in all required fields (First Name, Last Name, Email, Department).",
        variant: "destructive"
      });
      return;
    }

    // Validate email format
    if (!validateEmailFormat(employeeForm.email)) {
      toast({
        title: "Invalid Email",
        description: "Please enter a valid email address.",
        variant: "destructive"
      });
      return;
    }

    // Check for duplicate email
    if (checkDuplicateEmail(employeeForm.email, allEmployees)) {
      toast({
        title: "Duplicate Email",
        description: "An employee with this email already exists.",
        variant: "destructive"
      });
      return;
    }

    // Create and add new employee
    const newEmployee = createEmployeeFromForm(employeeForm);
    addEmployee(newEmployee);
    
    const fullName = `${employeeForm.firstName.trim()} ${employeeForm.lastName.trim()}`;
    toast({
      title: "Employee Added Successfully",
      description: `${fullName} has been added to the employee records and is now available in the Employee Records page.`,
    });

    resetForm();
    console.log('Employee added via Quick Actions and synced to main records:', newEmployee);
  };

  /**
   * Handle payroll processing - synchronized with main employee records
   */
  const handleProcessPayroll = () => {
    const activeEmployees = allEmployees.filter(emp => emp.status === 'Active');
    
    if (activeEmployees.length === 0) {
      toast({
        title: "No Active Employees",
        description: "No active employees found for payroll processing.",
        variant: "destructive"
      });
      return;
    }

    console.log('Processing payroll for employees:', activeEmployees.map(emp => ({
      id: emp.id,
      name: emp.name,
      department: emp.department,
      baseSalary: emp.baseSalary
    })));

    toast({
      title: "Payroll Processing Started",
      description: `Payroll for ${activeEmployees.length} active employees is being processed from main records. You will be notified when complete.`,
    });
  };

  /**
   * Handle leave request actions - directly updates main leave records
   */
  const handleLeaveAction = (action: 'approve' | 'reject', requestId: string, employeeName: string) => {
    const request = allLeaveRequests.find(req => req.id === requestId);
    
    if (!request) {
      toast({
        title: "Request Not Found",
        description: "The leave request could not be found in the system.",
        variant: "destructive"
      });
      return;
    }

    if (request.status !== 'Pending') {
      toast({
        title: "Request Already Processed",
        description: `This leave request has already been ${request.status.toLowerCase()}.`,
        variant: "destructive"
      });
      return;
    }

    if (action === 'approve') {
      approveLeaveRequest(requestId, 'HR Manager', 'Approved via Quick Actions');
      toast({
        title: "Leave Request Approved",
        description: `${employeeName}'s leave request has been approved and updated in main records.`,
      });
    } else {
      rejectLeaveRequest(requestId, 'HR Manager', 'Rejected via Quick Actions - needs more information');
      toast({
        title: "Leave Request Rejected",
        description: `${employeeName}'s leave request has been rejected and updated in main records.`,
        variant: "destructive"
      });
    }

    console.log(`Leave request ${requestId} ${action}ed via Quick Actions and synced to main records`);
  };

  /**
   * Handle report generation - uses data from main system records
   */
  const handleGenerateReport = (reportParams: ReportParams) => {
    if (!reportParams.reportType) {
      toast({
        title: "Validation Error",
        description: "Please select a report type.",
        variant: "destructive"
      });
      return;
    }

    // Generate report content with actual data
    const reportContent = generateReportContent(reportParams.reportType, reportParams);
    
    // Create filename based on report type and current date
    const dateStr = new Date().toISOString().split('T')[0];
    const reportTypeForFile = reportParams.reportType.replace(/\s+/g, '_').toLowerCase();
    const deptSuffix = reportParams.department ? `_${reportParams.department.replace(/\s+/g, '_').toLowerCase()}` : '';
    
    let filename: string;
    let mimeType: string;
    
    switch (reportParams.format.toLowerCase()) {
      case 'pdf':
        filename = `${reportTypeForFile}${deptSuffix}_${dateStr}.pdf`;
        mimeType = 'application/pdf';
        break;
      case 'excel':
        filename = `${reportTypeForFile}${deptSuffix}_${dateStr}.xlsx`;
        mimeType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
        break;
      case 'csv':
        filename = `${reportTypeForFile}${deptSuffix}_${dateStr}.csv`;
        mimeType = 'text/csv';
        break;
      default:
        filename = `${reportTypeForFile}${deptSuffix}_${dateStr}.txt`;
        mimeType = 'text/plain';
    }

    // Download the report
    downloadFile(reportContent, filename, mimeType);

    console.log('Generated report with main system data:', {
      reportType: reportParams.reportType,
      totalEmployees: allEmployees.length,
      totalLeaveRequests: allLeaveRequests.length,
      parameters: reportParams,
      filename: filename
    });

    toast({
      title: "Report Generated Successfully",
      description: `${reportParams.reportType} has been generated from main system records and downloaded as ${filename}`,
    });
  };

  /**
   * Handle performance review scheduling - uses main employee records
   */
  const handleScheduleReview = (reviewForm: any, resetForm: () => void) => {
    if (!reviewForm.employee || !reviewForm.dueDate) {
      toast({
        title: "Validation Error",
        description: "Please select an employee and due date.",
        variant: "destructive"
      });
      return;
    }

    const employee = allEmployees.find(emp => emp.name === reviewForm.employee);
    if (!employee) {
      toast({
        title: "Employee Not Found",
        description: "The selected employee could not be found in main records.",
        variant: "destructive"
      });
      return;
    }

    const dueDate = new Date(reviewForm.dueDate);
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    if (dueDate < today) {
      toast({
        title: "Invalid Due Date",
        description: "Due date must be in the future.",
        variant: "destructive"
      });
      return;
    }

    const reviewData = {
      employeeId: employee.id,
      employeeName: employee.name,
      department: employee.department,
      reviewType: reviewForm.reviewType,
      reviewer: reviewForm.reviewer,
      dueDate: reviewForm.dueDate,
      goals: reviewForm.goals?.trim() || 'No specific goals specified',
      scheduledDate: new Date().toISOString().split('T')[0],
      status: 'Scheduled'
    };

    console.log('Performance review scheduled for employee from main records:', reviewData);

    toast({
      title: "Performance Review Scheduled",
      description: `Performance review has been scheduled for ${reviewForm.employee} from main employee records.`,
    });

    resetForm();
  };

  return {
    handleAddEmployee,
    handleProcessPayroll,
    handleLeaveAction,
    handleGenerateReport,
    handleScheduleReview
  };
};
